import { PostMessageTransferer, RequestConnector } from '@osnova/events';
import { RequestEvent } from '@osnova/events/EventRequest';
import { AnyResponseEventMap } from '@osnova/events/EventResponse';
import { Unsubscribe } from '@osnova/events/lib/Unsubscribe';
import { FirebaseApp, onCollection } from '@osnova/firebase-client';

export type FirestoreConnectorOptions = {
  requestsCollection: string;
  responsesCollection: string;
  deleteResponse: boolean;
};

export class FirestoreConnector<
  OutEvent extends RequestEvent,
  Responses extends AnyResponseEventMap
> extends RequestConnector<OutEvent, Responses> {
  private options: FirestoreConnectorOptions;

  private responseListener: Unsubscribe | null = null;

  constructor(private firebase: FirebaseApp, options: FirestoreConnectorOptions) {
    super(
      new PostMessageTransferer({
        postMessage(event) {
          const db = firebase.firestore();
          const docRef = db.collection(options.requestsCollection).doc();

          docRef.set(event);

          // Set Id of an event with one generated by Firebase
          event['id'] = docRef.id;
        },
      }),
      {
        generateId: false,
      }
    );

    this.options = options;

    this.listenResponses();
  }

  public listenResponses() {
    const root = this.options.responsesCollection;

    // Release previously registered listener if any
    this.releaseResponseListener();

    this.responseListener = onCollection<Responses[keyof Responses]>(this.firebase, root, {
      onNewDoc: (data) => {
        this.accept(data);
      },
      removeAfterProcessed: this.options.deleteResponse,
    });

    return this.responseListener;
  }

  public releaseResponseListener() {
    if (this.responseListener) {
      this.responseListener();
      this.responseListener = null;
    }
  }
}
